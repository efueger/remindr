exports[`test renders the navigation component 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#fff",
      "borderTopColor": "#d9dbdb",
      "borderTopWidth": 1
    }
  }>
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "center"
      }
    }>
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      hitSlop={undefined}
      onLayout={undefined}
      onResponderGrant={[Function bound touchableHandleResponderGrant]}
      onResponderMove={[Function bound touchableHandleResponderMove]}
      onResponderRelease={[Function bound touchableHandleResponderRelease]}
      onResponderTerminate={[Function bound touchableHandleResponderTerminate]}
      onResponderTerminationRequest={[Function bound touchableHandleResponderTerminationRequest]}
      onStartShouldSetResponder={[Function bound touchableHandleStartShouldSetResponder]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent"
          },
          undefined
        ]
      }
      testID={undefined}>
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "fontSize": 11,
              "fontWeight": "300",
              "padding": 12
            }
          ]
        }>
        DEFERRED
      </Text>
    </View>
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      hitSlop={undefined}
      onLayout={undefined}
      onResponderGrant={[Function bound touchableHandleResponderGrant]}
      onResponderMove={[Function bound touchableHandleResponderMove]}
      onResponderRelease={[Function bound touchableHandleResponderRelease]}
      onResponderTerminate={[Function bound touchableHandleResponderTerminate]}
      onResponderTerminationRequest={[Function bound touchableHandleResponderTerminationRequest]}
      onStartShouldSetResponder={[Function bound touchableHandleStartShouldSetResponder]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent"
          },
          undefined
        ]
      }
      testID={undefined}>
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "fontSize": 11,
              "fontWeight": "300",
              "padding": 12
            },
            Object {
              "backgroundColor": "#03a9f4"
            },
            Object {
              "color": "#fff"
            }
          ]
        }>
        CURRENT
      </Text>
    </View>
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      hitSlop={undefined}
      onLayout={undefined}
      onResponderGrant={[Function bound touchableHandleResponderGrant]}
      onResponderMove={[Function bound touchableHandleResponderMove]}
      onResponderRelease={[Function bound touchableHandleResponderRelease]}
      onResponderTerminate={[Function bound touchableHandleResponderTerminate]}
      onResponderTerminationRequest={[Function bound touchableHandleResponderTerminationRequest]}
      onStartShouldSetResponder={[Function bound touchableHandleStartShouldSetResponder]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent"
          },
          undefined
        ]
      }
      testID={undefined}>
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "fontSize": 11,
              "fontWeight": "300",
              "padding": 12
            }
          ]
        }>
        DONE
      </Text>
    </View>
  </View>
</View>
`;
